// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rankster.Data;

#nullable disable

namespace Rankster.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Rankster.Data.Models.DbRankItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("RanksterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RanksterId");

                    b.ToTable("RankItem");
                });

            modelBuilder.Entity("Rankster.Data.Models.DbRankster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("CostUsd")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ended")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Ending")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("StrikeUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Rankster");
                });

            modelBuilder.Entity("Rankster.Data.Models.DbVote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Paid")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RankItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StrikeInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("RankItemId");

                    b.HasIndex("SessionKey");

                    b.HasIndex("Type");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("Rankster.Data.Models.EnumTable<Rankster.Data.Enums.VoteType>", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("VoteTypes");

                    b.HasData(
                        new
                        {
                            Id = (byte)0,
                            Name = "Up"
                        },
                        new
                        {
                            Id = (byte)1,
                            Name = "Down"
                        });
                });

            modelBuilder.Entity("Rankster.Data.Models.DbRankItem", b =>
                {
                    b.HasOne("Rankster.Data.Models.DbRankster", "Rankster")
                        .WithMany("RankItems")
                        .HasForeignKey("RanksterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rankster");
                });

            modelBuilder.Entity("Rankster.Data.Models.DbVote", b =>
                {
                    b.HasOne("Rankster.Data.Models.DbRankItem", "RankItem")
                        .WithMany("Votes")
                        .HasForeignKey("RankItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rankster.Data.Models.EnumTable<Rankster.Data.Enums.VoteType>", "TypeRef")
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RankItem");

                    b.Navigation("TypeRef");
                });

            modelBuilder.Entity("Rankster.Data.Models.DbRankItem", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Rankster.Data.Models.DbRankster", b =>
                {
                    b.Navigation("RankItems");
                });
#pragma warning restore 612, 618
        }
    }
}
